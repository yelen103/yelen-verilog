// -------------------------------------------------------------
// 
// File Name: D:\slsf_randgen\slsf\reportsneo\2024-01-29-11-29-59\Verilog_hdlsrc\sampleModel1641_sub\Subsystem_1.v
// Created: 2024-01-30 08:53:27
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk180                      ce_out        1
// cfblk181                      ce_out        1
// cfblk182                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem_1
// Source Path: sampleModel1641_sub/Subsystem_1
// Hierarchy Level: 0
// Model version: 1.1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns



module Subsystem_1
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk180,
           cfblk181,
           cfblk182,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk180;  // uint8
  output  [7:0] cfblk181;  // uint8
  output  [7:0] cfblk182;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [15:0] cfblk186_out1;  // uint16
  wire [15:0] cfblk178_out1;  // uint16
  wire [15:0] cfblk189_out1;  // uint16
  wire [15:0] cfblk76_out1;  // uint16
  wire [15:0] cfblk76_out2;  // uint16
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk188_out1;  // uint8
  wire [7:0] cfblk115_const_val_1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk107_out2;  // uint8
  wire [7:0] cfblk174_const_val_1;  // uint8
  wire [7:0] cfblk179_const_val_1;  // uint8
  wire [7:0] cfblk72_const_val_1;  // uint8
  wire [7:0] count_step;  // uint8
  wire [7:0] count_from;  // uint8
  reg [7:0] cfblk187_out1;  // uint8
  wire [7:0] count;  // uint8
  wire need_to_wrap;
  wire [7:0] count_value;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk104_out2;  // uint8
  wire [15:0] cfblk185_out1;  // uint16
  wire [31:0] cfblk117_add_temp;  // ufix32
  wire [31:0] cfblk117_1;  // ufix32
  wire [31:0] cfblk117_2;  // ufix32
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk96_const_val_1;  // uint8
  wire [7:0] cfblk141_const_val_1;  // uint8
  wire [7:0] bitMask_for_cfblk6;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk46_out2;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk252_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk161_out1;  // uint8
  reg [7:0] cfblk220_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk220_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk220_out1;  // uint8
  wire [7:0] cfblk207_out1;  // uint8
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk89_out2;  // uint8
  wire [3:0] cfblk9_out1;  // ufix4_E4
  wire [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk209_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk209_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk209_out1;  // uint8
  wire [7:0] cfblk217_out1;  // uint8
  wire [31:0] cfblk78_add_temp;  // ufix32
  wire [31:0] cfblk78_1;  // ufix32
  wire [31:0] cfblk78_2;  // ufix32
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  reg [7:0] cfblk210_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk210_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk210_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk194_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  reg [7:0] cfblk223_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk223_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk223_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  reg [7:0] cfblk204_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk204_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk204_out1;  // uint8
  wire [7:0] cfblk44_out2;  // uint8
  wire [7:0] cfblk179_out1;  // uint8
  reg [7:0] cfblk212_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk212_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk212_out1;  // uint8
  wire [7:0] cfblk26_out2;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk91_out2;  // uint8
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk25_out2;  // uint8
  reg [7:0] cfblk216_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk216_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk216_out1;  // uint8
  wire [7:0] cfblk173_out1;  // uint8
  wire [3:0] cfblk8_out1;  // ufix4_E4
  wire [3:0] cfblk192_out1;  // ufix4_E4
  wire [31:0] dtc_out;  // ufix32_E4
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  reg [7:0] cfblk214_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk214_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk214_out1;  // uint8
  wire [7:0] cfblk86_out2;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk116_out2;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk137_out1;  // uint8
  reg [7:0] cfblk203_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk203_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk203_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk190_out1;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  reg [7:0] cfblk224_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk224_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk224_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk69_out2;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  reg [7:0] cfblk207_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk207_reg_next [0:1];  // ufix8 [2]
  reg [7:0] cfblk160_out1;  // uint8
  wire signed [31:0] cfblk169_sub_temp;  // sfix32
  wire signed [31:0] cfblk169_1;  // sfix32
  wire signed [31:0] cfblk169_2;  // sfix32
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  reg [7:0] cfblk211_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk211_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk211_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk58_out2;  // uint8
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  reg [7:0] cfblk219_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk219_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk219_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  reg [7:0] cfblk217_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk217_reg_next [0:1];  // ufix8 [2]
  reg [7:0] cfblk222_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk222_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk222_out1;  // uint8
  wire [7:0] cfblk191_out1;  // uint8
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk159_out2;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  reg [7:0] cfblk206_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk206_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk206_out1;  // uint8
  wire [7:0] cfblk193_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk120_const_val_1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  reg [7:0] cfblk218_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk218_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk218_out1;  // uint8
  reg [7:0] cfblk213_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk213_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk213_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  reg [7:0] cfblk133_out1;  // uint8
  reg [7:0] cfblk205_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk205_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk205_out1;  // uint8
  reg [3:0] cfblk215_reg [0:1];  // ufix4 [2]
  wire [3:0] cfblk215_reg_next [0:1];  // ufix4_E4 [2]
  wire [3:0] cfblk215_out1;  // ufix4_E4
  wire [31:0] cfblk83_add_cast;  // ufix32
  wire [31:0] cfblk83_add_temp;  // ufix32
  wire [31:0] cfblk83_1;  // ufix32
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk167_out2;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk170_out1;  // uint8
  reg signed [31:0] cfblk220_t_0_0;  // int32
  reg signed [31:0] cfblk220_t_1;  // int32
  reg signed [31:0] cfblk209_t_0_0;  // int32
  reg signed [31:0] cfblk209_t_1;  // int32
  reg signed [31:0] cfblk210_t_0_0;  // int32
  reg signed [31:0] cfblk210_t_1;  // int32
  reg signed [31:0] cfblk223_t_0_0;  // int32
  reg signed [31:0] cfblk223_t_1;  // int32
  reg signed [31:0] cfblk204_t_0_0;  // int32
  reg signed [31:0] cfblk204_t_1;  // int32
  reg signed [31:0] cfblk212_t_0_0;  // int32
  reg signed [31:0] cfblk212_t_1;  // int32
  reg signed [31:0] cfblk216_t_0_0;  // int32
  reg signed [31:0] cfblk216_t_1;  // int32
  reg signed [31:0] cfblk214_t_0_0;  // int32
  reg signed [31:0] cfblk214_t_1;  // int32
  reg signed [31:0] cfblk203_t_0_0;  // int32
  reg signed [31:0] cfblk203_t_1;  // int32
  reg signed [31:0] cfblk224_t_0_0;  // int32
  reg signed [31:0] cfblk224_t_1;  // int32
  reg signed [31:0] cfblk207_t_0_0;  // int32
  reg signed [31:0] cfblk207_t_1;  // int32
  reg [8:0] cfblk160_div_temp;  // ufix9
  reg [8:0] cfblk160_t_0_0;  // ufix9
  reg signed [31:0] cfblk211_t_0_0;  // int32
  reg signed [31:0] cfblk211_t_1;  // int32
  reg signed [31:0] cfblk219_t_0_0;  // int32
  reg signed [31:0] cfblk219_t_1;  // int32
  reg signed [31:0] cfblk217_t_0_0;  // int32
  reg signed [31:0] cfblk217_t_1;  // int32
  reg signed [31:0] cfblk222_t_0_0;  // int32
  reg signed [31:0] cfblk222_t_1;  // int32
  reg signed [31:0] cfblk206_t_0_0;  // int32
  reg signed [31:0] cfblk206_t_1;  // int32
  reg signed [31:0] cfblk218_t_0_0;  // int32
  reg signed [31:0] cfblk218_t_1;  // int32
  reg signed [31:0] cfblk213_t_0_0;  // int32
  reg signed [31:0] cfblk213_t_1;  // int32
  reg [8:0] cfblk133_div_temp;  // ufix9
  reg [8:0] cfblk133_t_0_0;  // ufix9
  reg signed [31:0] cfblk205_t_0_0;  // int32
  reg signed [31:0] cfblk205_t_1;  // int32
  reg signed [31:0] cfblk215_t_0_0;  // int32
  reg signed [31:0] cfblk215_t_1;  // int32


  assign enb = clk_enable;

  cfblk186 u_cfblk186 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk186_out1)  // uint16
                       );

  cfblk178 u_cfblk178 (.u(cfblk186_out1),  // uint16
                       .y(cfblk178_out1)  // uint16
                       );

  cfblk189 u_cfblk189 (.In1(cfblk178_out1),  // uint16
                       .Out1(cfblk189_out1)  // uint16
                       );

  assign cfblk76_out1 = cfblk189_out1;
  assign cfblk76_out2 = 16'b0000000000000000;



  assign cfblk2_out1 = 8'b00000000;



  cfblk42 u_cfblk42 (.u(cfblk2_out1),  // uint8
                     .y(cfblk42_out1)  // uint8
                     );

  cfblk188 u_cfblk188 (.In1(cfblk42_out1),  // uint8
                       .Out1(cfblk188_out1)  // uint8
                       );

  assign cfblk115_const_val_1 = 8'b00000000;



  assign cfblk115_out1 = cfblk188_out1 + cfblk115_const_val_1;



  assign cfblk107_out1 = cfblk115_out1;
  assign cfblk107_out2 = 8'b00000000;



  assign cfblk174_const_val_1 = 8'b00000000;



  assign cfblk179_const_val_1 = 8'b00000000;



  assign cfblk72_const_val_1 = 8'b00000000;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 25
  assign count_step = 8'b00000001;



  assign count_from = 8'b00000000;



  assign count = cfblk187_out1 + count_step;



  assign need_to_wrap = cfblk187_out1 == 8'b00011001;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        cfblk187_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk187_out1 <= count_value;
        end
      end
    end



  assign cfblk104_out1 = cfblk187_out1;
  assign cfblk104_out2 = 8'b00000000;



  cfblk185 u_cfblk185 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk185_out1)  // uint16
                       );

  assign cfblk117_1 = {24'b0, cfblk104_out2};
  assign cfblk117_2 = {16'b0, cfblk185_out1};
  assign cfblk117_add_temp = cfblk117_1 + cfblk117_2;
  assign cfblk117_out1 = cfblk117_add_temp[7:0];



  cfblk111 u_cfblk111 (.u(cfblk117_out1),  // uint8
                       .y(cfblk111_out1)  // uint8
                       );

  assign cfblk96_const_val_1 = 8'b00000000;



  assign cfblk141_const_val_1 = 8'b00000000;



  assign bitMask_for_cfblk6 = 8'b11011001;



  assign cfblk113_out1 = cfblk185_out1[7:0];



  cfblk5 u_cfblk5 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk104_out1),  // uint8
                   .Y(cfblk5_out1)  // uint8
                   );

  assign cfblk4_out1 = 8'b00000000;



  assign cfblk46_out1 = cfblk4_out1;
  assign cfblk46_out2 = 8'b00000000;



  assign cfblk81_out1 = (cfblk46_out2 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block5 u_cfblk35_inst (.in1(cfblk252_out1),  // uint8
                                    .in2(cfblk81_out1),  // uint8
                                    .out1(cfblk35_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk220_process
      if (reset == 1'b1) begin
        for(cfblk220_t_1 = 32'sd0; cfblk220_t_1 <= 32'sd1; cfblk220_t_1 = cfblk220_t_1 + 32'sd1) begin
          cfblk220_reg[cfblk220_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk220_t_0_0 = 32'sd0; cfblk220_t_0_0 <= 32'sd1; cfblk220_t_0_0 = cfblk220_t_0_0 + 32'sd1) begin
            cfblk220_reg[cfblk220_t_0_0] <= cfblk220_reg_next[cfblk220_t_0_0];
          end
        end
      end
    end

  assign cfblk220_out1 = cfblk220_reg[1];
  assign cfblk220_reg_next[0] = cfblk161_out1;
  assign cfblk220_reg_next[1] = cfblk220_reg[0];



  assign cfblk168_out1 = cfblk220_out1 + cfblk207_out1;



  assign cfblk9_out1 = cfblk89_out2[7:4];



  assign cfblk252_out1 = {cfblk9_out1, 4'b0000};



  always @(posedge clk or posedge reset)
    begin : cfblk209_process
      if (reset == 1'b1) begin
        for(cfblk209_t_1 = 32'sd0; cfblk209_t_1 <= 32'sd1; cfblk209_t_1 = cfblk209_t_1 + 32'sd1) begin
          cfblk209_reg[cfblk209_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk209_t_0_0 = 32'sd0; cfblk209_t_0_0 <= 32'sd1; cfblk209_t_0_0 = cfblk209_t_0_0 + 32'sd1) begin
            cfblk209_reg[cfblk209_t_0_0] <= cfblk209_reg_next[cfblk209_t_0_0];
          end
        end
      end
    end

  assign cfblk209_out1 = cfblk209_reg[1];
  assign cfblk209_reg_next[0] = cfblk44_out1;
  assign cfblk209_reg_next[1] = cfblk209_reg[0];



  assign cfblk78_1 = {16'b0, cfblk76_out1};
  assign cfblk78_2 = {24'b0, cfblk217_out1};
  assign cfblk78_add_temp = cfblk78_1 + cfblk78_2;
  assign cfblk78_out1 = cfblk78_add_temp[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk210_process
      if (reset == 1'b1) begin
        for(cfblk210_t_1 = 32'sd0; cfblk210_t_1 <= 32'sd1; cfblk210_t_1 = cfblk210_t_1 + 32'sd1) begin
          cfblk210_reg[cfblk210_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk210_t_0_0 = 32'sd0; cfblk210_t_0_0 <= 32'sd1; cfblk210_t_0_0 = cfblk210_t_0_0 + 32'sd1) begin
            cfblk210_reg[cfblk210_t_0_0] <= cfblk210_reg_next[cfblk210_t_0_0];
          end
        end
      end
    end

  assign cfblk210_out1 = cfblk210_reg[1];
  assign cfblk210_reg_next[0] = cfblk143_out1;
  assign cfblk210_reg_next[1] = cfblk210_reg[0];



  assign cfblk50_out1 = cfblk210_out1 + cfblk78_out1;



  assign cfblk142_out1 = cfblk113_out1 + cfblk50_out1;



  assign cfblk6_out1 = cfblk172_out1 & bitMask_for_cfblk6;



  cfblk194 u_cfblk194 (.In1(cfblk6_out1),  // uint8
                       .Out1(cfblk194_out1)  // uint8
                       );

  assign cfblk84_out1 = cfblk194_out1 - cfblk142_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk223_process
      if (reset == 1'b1) begin
        for(cfblk223_t_1 = 32'sd0; cfblk223_t_1 <= 32'sd1; cfblk223_t_1 = cfblk223_t_1 + 32'sd1) begin
          cfblk223_reg[cfblk223_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk223_t_0_0 = 32'sd0; cfblk223_t_0_0 <= 32'sd1; cfblk223_t_0_0 = cfblk223_t_0_0 + 32'sd1) begin
            cfblk223_reg[cfblk223_t_0_0] <= cfblk223_reg_next[cfblk223_t_0_0];
          end
        end
      end
    end

  assign cfblk223_out1 = cfblk223_reg[1];
  assign cfblk223_reg_next[0] = cfblk37_out1;
  assign cfblk223_reg_next[1] = cfblk223_reg[0];



  assign cfblk146_out1 = cfblk111_out1 + cfblk72_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk204_process
      if (reset == 1'b1) begin
        for(cfblk204_t_1 = 32'sd0; cfblk204_t_1 <= 32'sd1; cfblk204_t_1 = cfblk204_t_1 + 32'sd1) begin
          cfblk204_reg[cfblk204_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk204_t_0_0 = 32'sd0; cfblk204_t_0_0 <= 32'sd1; cfblk204_t_0_0 = cfblk204_t_0_0 + 32'sd1) begin
            cfblk204_reg[cfblk204_t_0_0] <= cfblk204_reg_next[cfblk204_t_0_0];
          end
        end
      end
    end

  assign cfblk204_out1 = cfblk204_reg[1];
  assign cfblk204_reg_next[0] = cfblk146_out1;
  assign cfblk204_reg_next[1] = cfblk204_reg[0];



  assign cfblk179_out1 = cfblk44_out2 + cfblk179_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk212_process
      if (reset == 1'b1) begin
        for(cfblk212_t_1 = 32'sd0; cfblk212_t_1 <= 32'sd1; cfblk212_t_1 = cfblk212_t_1 + 32'sd1) begin
          cfblk212_reg[cfblk212_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk212_t_0_0 = 32'sd0; cfblk212_t_0_0 <= 32'sd1; cfblk212_t_0_0 = cfblk212_t_0_0 + 32'sd1) begin
            cfblk212_reg[cfblk212_t_0_0] <= cfblk212_reg_next[cfblk212_t_0_0];
          end
        end
      end
    end

  assign cfblk212_out1 = cfblk212_reg[1];
  assign cfblk212_reg_next[0] = cfblk179_out1;
  assign cfblk212_reg_next[1] = cfblk212_reg[0];



  assign cfblk91_out1 = cfblk26_out2;
  assign cfblk91_out2 = 8'b00000000;



  assign cfblk174_out1 = cfblk91_out2 + cfblk174_const_val_1;



  cfblk148 u_cfblk148 (.u(cfblk174_out1),  // uint8
                       .y(cfblk148_out1)  // uint8
                       );

  cfblk79 u_cfblk79 (.u(cfblk148_out1),  // uint8
                     .y(cfblk79_out1)  // uint8
                     );

  assign cfblk25_out1 = cfblk89_out1;
  assign cfblk25_out2 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk216_process
      if (reset == 1'b1) begin
        for(cfblk216_t_1 = 32'sd0; cfblk216_t_1 <= 32'sd1; cfblk216_t_1 = cfblk216_t_1 + 32'sd1) begin
          cfblk216_reg[cfblk216_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk216_t_0_0 = 32'sd0; cfblk216_t_0_0 <= 32'sd1; cfblk216_t_0_0 = cfblk216_t_0_0 + 32'sd1) begin
            cfblk216_reg[cfblk216_t_0_0] <= cfblk216_reg_next[cfblk216_t_0_0];
          end
        end
      end
    end

  assign cfblk216_out1 = cfblk216_reg[1];
  assign cfblk216_reg_next[0] = cfblk25_out1;
  assign cfblk216_reg_next[1] = cfblk216_reg[0];



  DotProduct_block4 u_cfblk173_inst (.in1(cfblk216_out1),  // uint8
                                     .in2(cfblk79_out1),  // uint8
                                     .out1(cfblk173_out1)  // uint8
                                     );

  assign cfblk8_out1 = cfblk173_out1[7:4];



  cfblk192 u_cfblk192 (.In1(cfblk8_out1),  // ufix4_E4
                       .Out1(cfblk192_out1)  // ufix4_E4
                       );

  assign dtc_out = {28'b0, cfblk192_out1};



  assign cfblk161_out1 = {dtc_out[3:0], 4'b0000};



  DotProduct u_cfblk103_inst (.in1(cfblk161_out1),  // uint8
                              .in2(cfblk42_out1),  // uint8
                              .out1(cfblk103_out1)  // uint8
                              );

  assign cfblk89_out1 = cfblk103_out1;
  assign cfblk89_out2 = 8'b00000000;



  assign cfblk131_out1 = cfblk89_out2 + cfblk11_out1;



  assign cfblk82_out1 = cfblk131_out1 - cfblk174_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk214_process
      if (reset == 1'b1) begin
        for(cfblk214_t_1 = 32'sd0; cfblk214_t_1 <= 32'sd1; cfblk214_t_1 = cfblk214_t_1 + 32'sd1) begin
          cfblk214_reg[cfblk214_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk214_t_0_0 = 32'sd0; cfblk214_t_0_0 <= 32'sd1; cfblk214_t_0_0 = cfblk214_t_0_0 + 32'sd1) begin
            cfblk214_reg[cfblk214_t_0_0] <= cfblk214_reg_next[cfblk214_t_0_0];
          end
        end
      end
    end

  assign cfblk214_out1 = cfblk214_reg[1];
  assign cfblk214_reg_next[0] = cfblk82_out1;
  assign cfblk214_reg_next[1] = cfblk214_reg[0];



  assign cfblk55_out1 = (cfblk86_out2 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_1 = cfblk55_out1;



  assign cfblk48_out1 = dtc_out_1;



  assign cfblk57_out1 = cfblk48_out1 + cfblk107_out2;



  assign dtc_out_2 = cfblk57_out1;



  assign cfblk129_out1 = dtc_out_2;



  cfblk7 u_cfblk7 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk129_out1),  // uint8
                   .Y(cfblk7_out1)  // uint8
                   );

  assign cfblk16_out1 = cfblk7_out1 + cfblk214_out1;



  DotProduct_block6 u_cfblk41_inst (.in1(cfblk16_out1),  // uint8
                                    .in2(cfblk212_out1),  // uint8
                                    .out1(cfblk41_out1)  // uint8
                                    );

  assign cfblk72_out1 = cfblk41_out1 + cfblk72_const_val_1;



  assign cfblk116_out1 = cfblk72_out1;
  assign cfblk116_out2 = 8'b00000000;



  assign dtc_out_3 = cfblk116_out1;



  assign cfblk153_out1 = dtc_out_3;



  assign dtc_out_4 = cfblk153_out1;



  assign cfblk137_out1 = dtc_out_4;



  always @(posedge clk or posedge reset)
    begin : cfblk203_process
      if (reset == 1'b1) begin
        for(cfblk203_t_1 = 32'sd0; cfblk203_t_1 <= 32'sd1; cfblk203_t_1 = cfblk203_t_1 + 32'sd1) begin
          cfblk203_reg[cfblk203_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk203_t_0_0 = 32'sd0; cfblk203_t_0_0 <= 32'sd1; cfblk203_t_0_0 = cfblk203_t_0_0 + 32'sd1) begin
            cfblk203_reg[cfblk203_t_0_0] <= cfblk203_reg_next[cfblk203_t_0_0];
          end
        end
      end
    end

  assign cfblk203_out1 = cfblk203_reg[1];
  assign cfblk203_reg_next[0] = cfblk137_out1;
  assign cfblk203_reg_next[1] = cfblk203_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk203_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign dtc_out_5 = cfblk1_out1;



  assign cfblk138_out1 = dtc_out_5;



  cfblk190 u_cfblk190 (.In1(cfblk138_out1),  // uint8
                       .Out1(cfblk190_out1)  // uint8
                       );

  assign cfblk31_out1 = (cfblk156_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk224_process
      if (reset == 1'b1) begin
        for(cfblk224_t_1 = 32'sd0; cfblk224_t_1 <= 32'sd1; cfblk224_t_1 = cfblk224_t_1 + 32'sd1) begin
          cfblk224_reg[cfblk224_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk224_t_0_0 = 32'sd0; cfblk224_t_0_0 <= 32'sd1; cfblk224_t_0_0 = cfblk224_t_0_0 + 32'sd1) begin
            cfblk224_reg[cfblk224_t_0_0] <= cfblk224_reg_next[cfblk224_t_0_0];
          end
        end
      end
    end

  assign cfblk224_out1 = cfblk224_reg[1];
  assign cfblk224_reg_next[0] = cfblk31_out1;
  assign cfblk224_reg_next[1] = cfblk224_reg[0];



  assign cfblk87_out1 = cfblk224_out1 + cfblk190_out1;



  assign cfblk134_out1 = cfblk87_out1 + cfblk204_out1;



  assign cfblk64_out1 = cfblk134_out1 + cfblk223_out1;



  cfblk20 u_cfblk20 (.u(cfblk64_out1),  // uint8
                     .y(cfblk20_out1)  // uint8
                     );

  assign dtc_out_6 = cfblk20_out1;



  assign cfblk21_out1 = dtc_out_6;



  assign cfblk172_out1 = (cfblk21_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk96_out1 = cfblk172_out1 + cfblk96_const_val_1;



  assign cfblk69_out1 = cfblk96_out1;
  assign cfblk69_out2 = 8'b00000000;



  assign cfblk141_out1 = cfblk69_out1 + cfblk141_const_val_1;



  assign dtc_out_7 = cfblk141_out1;



  assign cfblk92_out1 = dtc_out_7;



  assign cfblk98_out1 = cfblk92_out1 + cfblk84_out1;



  assign cfblk149_out1 = cfblk98_out1 + cfblk63_out1;



  assign cfblk26_out1 = cfblk149_out1;
  assign cfblk26_out2 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk207_process
      if (reset == 1'b1) begin
        for(cfblk207_t_1 = 32'sd0; cfblk207_t_1 <= 32'sd1; cfblk207_t_1 = cfblk207_t_1 + 32'sd1) begin
          cfblk207_reg[cfblk207_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk207_t_0_0 = 32'sd0; cfblk207_t_0_0 <= 32'sd1; cfblk207_t_0_0 = cfblk207_t_0_0 + 32'sd1) begin
            cfblk207_reg[cfblk207_t_0_0] <= cfblk207_reg_next[cfblk207_t_0_0];
          end
        end
      end
    end

  assign cfblk207_out1 = cfblk207_reg[1];
  assign cfblk207_reg_next[0] = cfblk118_out1;
  assign cfblk207_reg_next[1] = cfblk207_reg[0];



  always @(cfblk207_out1, cfblk217_out1) begin
    cfblk160_div_temp = 9'b000000000;
    cfblk160_t_0_0 = 9'b000000000;
    if (cfblk207_out1 == 8'b00000000) begin
      cfblk160_out1 = 8'b11111111;
    end
    else begin
      cfblk160_t_0_0 = {1'b0, cfblk217_out1};
      cfblk160_div_temp = cfblk160_t_0_0 / cfblk207_out1;
      if (cfblk160_div_temp[8] != 1'b0) begin
        cfblk160_out1 = 8'b11111111;
      end
      else begin
        cfblk160_out1 = cfblk160_div_temp[7:0];
      end
    end
  end



  assign cfblk169_1 = {24'b0, cfblk160_out1};
  assign cfblk169_2 = {16'b0, cfblk76_out2};
  assign cfblk169_sub_temp = cfblk169_1 - cfblk169_2;
  assign cfblk169_out1 = cfblk169_sub_temp[7:0];



  assign cfblk52_out1 = cfblk169_out1 + cfblk26_out2;



  DotProduct_block1 u_cfblk119_inst (.in1(cfblk52_out1),  // uint8
                                     .in2(cfblk174_out1),  // uint8
                                     .out1(cfblk119_out1)  // uint8
                                     );

  assign cfblk122_out1 = cfblk119_out1 + cfblk50_out1;



  assign cfblk94_out1 = cfblk122_out1 + cfblk52_out1;



  DotProduct_block2 u_cfblk124_inst (.in1(cfblk94_out1),  // uint8
                                     .in2(cfblk5_out1),  // uint8
                                     .out1(cfblk124_out1)  // uint8
                                     );

  cfblk43 u_cfblk43 (.u(cfblk124_out1),  // uint8
                     .y(cfblk43_out1)  // uint8
                     );

  assign cfblk44_out1 = cfblk43_out1;
  assign cfblk44_out2 = 8'b00000000;



  assign cfblk126_out1 = cfblk44_out2 + cfblk26_out2;



  assign cfblk143_out1 = cfblk61_out1 + cfblk126_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk211_process
      if (reset == 1'b1) begin
        for(cfblk211_t_1 = 32'sd0; cfblk211_t_1 <= 32'sd1; cfblk211_t_1 = cfblk211_t_1 + 32'sd1) begin
          cfblk211_reg[cfblk211_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk211_t_0_0 = 32'sd0; cfblk211_t_0_0 <= 32'sd1; cfblk211_t_0_0 = cfblk211_t_0_0 + 32'sd1) begin
            cfblk211_reg[cfblk211_t_0_0] <= cfblk211_reg_next[cfblk211_t_0_0];
          end
        end
      end
    end

  assign cfblk211_out1 = cfblk211_reg[1];
  assign cfblk211_reg_next[0] = cfblk143_out1;
  assign cfblk211_reg_next[1] = cfblk211_reg[0];



  assign cfblk19_out1 = cfblk211_out1 + cfblk209_out1;



  assign cfblk37_out1 = (cfblk19_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk28 u_cfblk28 (.u(cfblk37_out1),  // uint8
                     .y(cfblk28_out1)  // uint8
                     );

  assign cfblk58_out1 = cfblk28_out1;
  assign cfblk58_out2 = 8'b00000000;



  assign cfblk63_out1 = cfblk58_out2 + cfblk166_out1;



  assign cfblk105_out1 = cfblk63_out1 - cfblk252_out1;



  assign cfblk145_out1 = (cfblk105_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk219_process
      if (reset == 1'b1) begin
        for(cfblk219_t_1 = 32'sd0; cfblk219_t_1 <= 32'sd1; cfblk219_t_1 = cfblk219_t_1 + 32'sd1) begin
          cfblk219_reg[cfblk219_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk219_t_0_0 = 32'sd0; cfblk219_t_0_0 <= 32'sd1; cfblk219_t_0_0 = cfblk219_t_0_0 + 32'sd1) begin
            cfblk219_reg[cfblk219_t_0_0] <= cfblk219_reg_next[cfblk219_t_0_0];
          end
        end
      end
    end

  assign cfblk219_out1 = cfblk219_reg[1];
  assign cfblk219_reg_next[0] = cfblk145_out1;
  assign cfblk219_reg_next[1] = cfblk219_reg[0];



  DotProduct_block u_cfblk118_inst (.in1(cfblk219_out1),  // uint8
                                    .in2(cfblk168_out1),  // uint8
                                    .out1(cfblk118_out1)  // uint8
                                    );

  assign cfblk101_out1 = cfblk118_out1 + cfblk35_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk217_process
      if (reset == 1'b1) begin
        for(cfblk217_t_1 = 32'sd0; cfblk217_t_1 <= 32'sd1; cfblk217_t_1 = cfblk217_t_1 + 32'sd1) begin
          cfblk217_reg[cfblk217_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk217_t_0_0 = 32'sd0; cfblk217_t_0_0 <= 32'sd1; cfblk217_t_0_0 = cfblk217_t_0_0 + 32'sd1) begin
            cfblk217_reg[cfblk217_t_0_0] <= cfblk217_reg_next[cfblk217_t_0_0];
          end
        end
      end
    end

  assign cfblk217_out1 = cfblk217_reg[1];
  assign cfblk217_reg_next[0] = cfblk101_out1;
  assign cfblk217_reg_next[1] = cfblk217_reg[0];



  cfblk11 u_cfblk11 (.u(cfblk217_out1),  // uint8
                     .y(cfblk11_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : cfblk222_process
      if (reset == 1'b1) begin
        for(cfblk222_t_1 = 32'sd0; cfblk222_t_1 <= 32'sd1; cfblk222_t_1 = cfblk222_t_1 + 32'sd1) begin
          cfblk222_reg[cfblk222_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk222_t_0_0 = 32'sd0; cfblk222_t_0_0 <= 32'sd1; cfblk222_t_0_0 = cfblk222_t_0_0 + 32'sd1) begin
            cfblk222_reg[cfblk222_t_0_0] <= cfblk222_reg_next[cfblk222_t_0_0];
          end
        end
      end
    end

  assign cfblk222_out1 = cfblk222_reg[1];
  assign cfblk222_reg_next[0] = cfblk11_out1;
  assign cfblk222_reg_next[1] = cfblk222_reg[0];



  DotProduct_block3 u_cfblk166_inst (.in1(cfblk222_out1),  // uint8
                                     .in2(cfblk2_out1),  // uint8
                                     .out1(cfblk166_out1)  // uint8
                                     );

  cfblk191 u_cfblk191 (.In1(cfblk166_out1),  // uint8
                       .Out1(cfblk191_out1)  // uint8
                       );

  assign cfblk159_out1 = cfblk191_out1;
  assign cfblk159_out2 = 8'b00000000;



  assign cfblk156_out1 = (cfblk159_out2 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk61 u_cfblk61 (.u(cfblk156_out1),  // uint8
                     .y(cfblk61_out1)  // uint8
                     );

  assign cfblk86_out1 = cfblk61_out1;
  assign cfblk86_out2 = 8'b00000000;



  assign cfblk30_out1 = cfblk86_out1 + cfblk119_out1;



  assign cfblk180 = cfblk30_out1;

  assign cfblk181 = cfblk5_out1;

  always @(posedge clk or posedge reset)
    begin : cfblk206_process
      if (reset == 1'b1) begin
        for(cfblk206_t_1 = 32'sd0; cfblk206_t_1 <= 32'sd1; cfblk206_t_1 = cfblk206_t_1 + 32'sd1) begin
          cfblk206_reg[cfblk206_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk206_t_0_0 = 32'sd0; cfblk206_t_0_0 <= 32'sd1; cfblk206_t_0_0 = cfblk206_t_0_0 + 32'sd1) begin
            cfblk206_reg[cfblk206_t_0_0] <= cfblk206_reg_next[cfblk206_t_0_0];
          end
        end
      end
    end

  assign cfblk206_out1 = cfblk206_reg[1];
  assign cfblk206_reg_next[0] = cfblk168_out1;
  assign cfblk206_reg_next[1] = cfblk206_reg[0];



  cfblk193 u_cfblk193 (.In1(cfblk116_out2),  // uint8
                       .Out1(cfblk193_out1)  // uint8
                       );

  assign cfblk123_out1 = cfblk206_out1 - cfblk193_out1;



  assign dtc_out_8 = cfblk123_out1;



  assign cfblk158_out1 = dtc_out_8;



  assign cfblk120_const_val_1 = 8'b00000000;



  assign cfblk120_out1 = cfblk158_out1 + cfblk120_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk218_process
      if (reset == 1'b1) begin
        for(cfblk218_t_1 = 32'sd0; cfblk218_t_1 <= 32'sd1; cfblk218_t_1 = cfblk218_t_1 + 32'sd1) begin
          cfblk218_reg[cfblk218_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk218_t_0_0 = 32'sd0; cfblk218_t_0_0 <= 32'sd1; cfblk218_t_0_0 = cfblk218_t_0_0 + 32'sd1) begin
            cfblk218_reg[cfblk218_t_0_0] <= cfblk218_reg_next[cfblk218_t_0_0];
          end
        end
      end
    end

  assign cfblk218_out1 = cfblk218_reg[1];
  assign cfblk218_reg_next[0] = cfblk105_out1;
  assign cfblk218_reg_next[1] = cfblk218_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk213_process
      if (reset == 1'b1) begin
        for(cfblk213_t_1 = 32'sd0; cfblk213_t_1 <= 32'sd1; cfblk213_t_1 = cfblk213_t_1 + 32'sd1) begin
          cfblk213_reg[cfblk213_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk213_t_0_0 = 32'sd0; cfblk213_t_0_0 <= 32'sd1; cfblk213_t_0_0 = cfblk213_t_0_0 + 32'sd1) begin
            cfblk213_reg[cfblk213_t_0_0] <= cfblk213_reg_next[cfblk213_t_0_0];
          end
        end
      end
    end

  assign cfblk213_out1 = cfblk213_reg[1];
  assign cfblk213_reg_next[0] = cfblk82_out1;
  assign cfblk213_reg_next[1] = cfblk213_reg[0];



  assign cfblk130_out1 = cfblk213_out1 + cfblk21_out1;



  always @(cfblk130_out1, cfblk218_out1) begin
    cfblk133_div_temp = 9'b000000000;
    cfblk133_t_0_0 = 9'b000000000;
    if (cfblk130_out1 == 8'b00000000) begin
      cfblk133_out1 = 8'b11111111;
    end
    else begin
      cfblk133_t_0_0 = {1'b0, cfblk218_out1};
      cfblk133_div_temp = cfblk133_t_0_0 / cfblk130_out1;
      if (cfblk133_div_temp[8] != 1'b0) begin
        cfblk133_out1 = 8'b11111111;
      end
      else begin
        cfblk133_out1 = cfblk133_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk205_process
      if (reset == 1'b1) begin
        for(cfblk205_t_1 = 32'sd0; cfblk205_t_1 <= 32'sd1; cfblk205_t_1 = cfblk205_t_1 + 32'sd1) begin
          cfblk205_reg[cfblk205_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk205_t_0_0 = 32'sd0; cfblk205_t_0_0 <= 32'sd1; cfblk205_t_0_0 = cfblk205_t_0_0 + 32'sd1) begin
            cfblk205_reg[cfblk205_t_0_0] <= cfblk205_reg_next[cfblk205_t_0_0];
          end
        end
      end
    end

  assign cfblk205_out1 = cfblk205_reg[1];
  assign cfblk205_reg_next[0] = cfblk120_out1;
  assign cfblk205_reg_next[1] = cfblk205_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk215_process
      if (reset == 1'b1) begin
        for(cfblk215_t_1 = 32'sd0; cfblk215_t_1 <= 32'sd1; cfblk215_t_1 = cfblk215_t_1 + 32'sd1) begin
          cfblk215_reg[cfblk215_t_1] <= 4'b0000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk215_t_0_0 = 32'sd0; cfblk215_t_0_0 <= 32'sd1; cfblk215_t_0_0 = cfblk215_t_0_0 + 32'sd1) begin
            cfblk215_reg[cfblk215_t_0_0] <= cfblk215_reg_next[cfblk215_t_0_0];
          end
        end
      end
    end

  assign cfblk215_out1 = cfblk215_reg[1];
  assign cfblk215_reg_next[0] = cfblk192_out1;
  assign cfblk215_reg_next[1] = cfblk215_reg[0];



  assign cfblk83_add_cast = {24'b0, {cfblk215_out1, 4'b0000}};
  assign cfblk83_1 = {24'b0, cfblk133_out1};
  assign cfblk83_add_temp = cfblk83_1 + cfblk83_add_cast;
  assign cfblk83_out1 = cfblk83_add_temp[7:0];



  assign cfblk56_out1 = cfblk205_out1 + cfblk83_out1;



  assign cfblk167_out1 = cfblk56_out1;
  assign cfblk167_out2 = 8'b00000000;



  assign cfblk47_out1 = (cfblk159_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block7 u_cfblk66_inst (.in1(cfblk167_out2),  // uint8
                                    .in2(cfblk47_out1),  // uint8
                                    .out1(cfblk66_out1)  // uint8
                                    );

  assign cfblk182 = cfblk66_out1;

  assign dtc_out_9 = cfblk19_out1;



  assign cfblk170_out1 = dtc_out_9;



  assign Hdl_out = cfblk170_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem_1

